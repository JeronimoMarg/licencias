/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.metodos.licencias.view;

import com.metodos.licencias.DTO.TitularDTO;
import java.awt.Color;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentCatalog;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;
import org.apache.pdfbox.pdmodel.interactive.form.PDField;
import org.apache.pdfbox.rendering.PDFRenderer;

/**
 *
 * @author valec
 */
public class ComprobantePanel extends javax.swing.JPanel {

    int cornerRadius = 15;
    Color grisOscuro = new Color(80,80,80);
    private double zoomFactor = 1;
    PDDocument document = null;
    Frame frame;
    TitularDTO titular;
    Double costo;
    
    /**
     * Creates new form ComprobantePanel
     */
    public ComprobantePanel(TitularDTO titularDTO, Double costo, Frame main) {
        
        this.frame = main;
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {

                try {
                    document.close();
                } catch (IOException ex) {
                    VentanaEmergente cerrarArchivo = new VentanaEmergente("Error al cerrar el documento PDF");
                }

                frame.dispose();
            }
        });
        
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
               try {
                    document.close();
                } catch (IOException ex) {
                    VentanaEmergente cerrarArchivo = new VentanaEmergente("Error al cerrar el documento PDF");
                }

                frame.dispose();
            }
        });
        
        initComponents();
        this.titular = titularDTO;
        this.costo = costo;
        initComponents();
        pdfConfig();
        this.revalidate();
        this.repaint();
        revalidate();
        repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(252, 252, 252));
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void pdfConfig() {
        
        this.setLayout(new GridBagLayout());
        JPanel pdfPanel  = new JPanel();
        
        JPanel relleno = new JPanel();
        relleno.setBackground(new Color(252,252,252));
        RoundedButton zoomInButton = new RoundedButton(cornerRadius);
        zoomInButton.setText("+");
        zoomInButton.setBackground(new Color(194,194,194));
        zoomInButton.setForeground(new Color(51,51,51));
        zoomInButton.setFocusable(false);
        RoundedButton zoomOutButton = new RoundedButton(cornerRadius);
        zoomOutButton.setText("-");
        zoomOutButton.setBackground(new Color(194,194,194));
        zoomOutButton.setForeground(new Color(51,51,51));
        zoomOutButton.setFocusable(false);
        RoundedButton volver = new RoundedButton(cornerRadius);
        volver.setBackground(new Color(27, 140, 188));
        volver.setForeground(new Color(252,252,252));
        volver.setFocusable(false);
        volver.setText("Cerrar");
        RoundedButton descargar = new RoundedButton(cornerRadius);
        descargar.setBackground(new Color(27, 140, 188));
        descargar.setForeground(new Color(252,252,252));
        descargar.setFocusable(false);
        descargar.setText("Imprimir");
        
        PDDocument document = displayPDF("Comprobante.pdf", zoomFactor, pdfPanel);
        
        zoomInButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(zoomFactor < 2.5){
                    zoomFactor *= 1.2;
                    updateZoom(pdfPanel, (float) (zoomFactor));
                }
            }
        });

        zoomOutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if(zoomFactor > 0.4){
                    zoomFactor /= 1.2;
                    updateZoom(pdfPanel, (float) (zoomFactor));
                }
            }
        });
        
        volver.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //boton cerrar
                try {
                    document.close();
                } catch (IOException ex) {
                    VentanaEmergente cerrarArchivo = new VentanaEmergente("Error al cerrar el documento PDF");
                }
                frame.dispose();
            }
        });
        
        descargar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    descargarPDF(document);
                } catch (IOException ex) {
                    Logger.getLogger(ComprobantePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        pdfPanel.setLayout(new BoxLayout(pdfPanel, BoxLayout.Y_AXIS));
        JScrollPane scrollPane = new JScrollPane(pdfPanel);
           
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1;
        gbc.weightx = 0.98;
        gbc.gridheight = 5;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10,20,20,10);
        this.add(scrollPane,gbc);
        
        gbc.gridheight = 1;
        gbc.weightx = 0.02;
        gbc.weighty = 0.01;
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.NONE;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10,0,0,30);
        this.add(zoomInButton, gbc);
        
        gbc.gridy = 1;
        gbc.insets = new Insets(10,0,0,30);
        this.add(zoomOutButton, gbc);
        
        gbc.gridy = 2;
        gbc.insets = new Insets(0,0,0,30);
        gbc.fill = GridBagConstraints.BOTH;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.weighty = 1;
        this.add(relleno,gbc);
        
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        //gbc.anchor = GridBagConstraints.WEST;
        gbc.weighty = 0.01;
        gbc.insets = new Insets(0,0,10,30);
        this.add(volver,gbc);
        
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        //gbc.anchor = GridBagConstraints.EAST;
        gbc.weighty = 0.01;
        gbc.insets = new Insets(0,0,20,30);
        this.add(descargar,gbc);

    }
    
    private PDDocument displayPDF(String pdfFilePath, double zoomFactor, JPanel panelPDF) {
       
        document = new PDDocument();
        
        try {
            document = PDDocument.load(new File(pdfFilePath));
            PDFRenderer renderer = new PDFRenderer(document);
            
            try{
            llenarPDF(document);
            }
            catch(Exception e){
                VentanaEmergente errorCargarDoc = new VentanaEmergente("No se puede completar el cargado del PDF");
            }
            
            int pageCount = document.getNumberOfPages();
            for (int pageIndex = 0; pageIndex < pageCount; pageIndex++) {
                BufferedImage image = renderer.renderImageWithDPI(pageIndex, (float) (100 * zoomFactor));

                ImageIcon imageIcon = new ImageIcon(image);
                JLabel label = new JLabel(imageIcon);
                panelPDF.add(label);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
  
        
        return document;
    }
    
    private void llenarPDF(PDDocument document) throws IOException {
       PDAcroForm pDAcroForm = document.getDocumentCatalog().getAcroForm();
            PDField field = pDAcroForm.getField("fechaField");
            Date currentDate = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            String date = dateFormat.format(currentDate);
            field.setValue(date);
            field = pDAcroForm.getField("costoLicenciaField");
            field.setValue(costo.toString());
            field = pDAcroForm.getField("nombreField");
            field.setValue(titular.getNombre());
            field = pDAcroForm.getField("apellidoField");
            field.setValue(titular.getApellido());
            field = pDAcroForm.getField("direccionField");
            field.setValue(titular.getCalle() +" "+ titular.getAltura());
            field = pDAcroForm.getField("nombreOrganizacionField");
            field.setValue("nombreOrganizacion");
            field = pDAcroForm.getField("direccionOrganizacionField");
            field.setValue("direccionOrganizacion");
            field = pDAcroForm.getField("telefonoOrganizacionField");
            field.setValue("telefonoOrganizacion");
            field = pDAcroForm.getField("totalOperacionField");
            field.setValue("costo + costo administrativo? -> " + (costo+8.0));
            field = pDAcroForm.getField("formaPagoField");
            field.setValue("forma de pago del comprobante");
    }
    
    void descargarPDF(PDDocument document) throws IOException{
        
        // Use JFileChooser to choose the location and filename for saving the PDF
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save PDF");
            int userSelection = fileChooser.showSaveDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                // Get the selected file
                File selectedFile = fileChooser.getSelectedFile();

                // Ensure the file has a .pdf extension
                String pdfFilePath = selectedFile.getAbsolutePath();
                if (!pdfFilePath.toLowerCase().endsWith(".pdf")) {
                    pdfFilePath += ".pdf";
                }

                // Set the form fields as read-only
                setFormFieldsReadOnly(document);
                
                // Save the document to the specified file
                document.save(pdfFilePath);
                document.close();
            }
    }
    
     private void setFormFieldsReadOnly(PDDocument document) {
        PDDocumentCatalog catalog = document.getDocumentCatalog();
        PDAcroForm acroForm = catalog.getAcroForm();

        if (acroForm != null) {
            // Iterate through all pages
            for (PDPage page : document.getPages()) {
                // Iterate through all fields on the page
                acroForm.getFields().forEach(field -> {
                    // Set the read-only flag for each field
                    field.setReadOnly(true);
                });
            }
        }
    }
     
      private void updateZoom(JPanel pdfPanel,  double zoomFactor) {
        pdfPanel.removeAll();
        displayPDF("Comprobante.pdf", zoomFactor, pdfPanel);
        revalidate();
        repaint();
    }

}
